
  # Deploy to Azure Kubernetes Service
  trigger:
  - master

  resources:
  - repo: self

  variables:

    # Container registry service connection established during pipeline creation
    dockerRegistryServiceConnection: 'e9e10d12-0bd0-43ec-84e4-efd6a6f0ee33'
    imageRepository: 'giuliadinuzzopipelinesjavascriptdocker'
    containerRegistry: 'fdrgdncr.azurecr.io'
    dockerfilePath: '**/Dockerfile'
    tag: '$(Build.BuildId)'
    imagePullSecret: 'fdrgdncr6203-auth'

    # Agent VM image name
    vmImageName: 'ubuntu-latest'

  stages:
  - stage: FortifyDeploy
    displayName: 'Fortify Deploy'
    jobs:

    # start VM
    - job: StartUpVM
      displayName: 'StartUpVM'
      pool:
        name: 'Azure Pipelines'
      steps:
      - task: AzureCLI@2
        displayName: 'AzureCLIStart'
        inputs:
          azureSubscription: 'Azure Labs(c56bd57b-639e-4378-a70a-0484570ebb6d)'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: 'az vm start -g FDRGDN-rg -n FDRGDNvm'

    # install fortify sca
    - job: Fortify
      displayName: 'Fortify'
      dependsOn: StartUpVM
      pool:
        name: default
      steps:
      - task: InstallFortifySCA@7
        inputs:
          InstallerPath: '/home/azureuser/Fortify_SCA_and_Apps_20.1.1_linux_x64.run'
          VS2017: true
          VS2019: true
          LicenseFile: '/home/azureuser/Accenture_EMEA_Static.txt'
          RunFortifyRulepackUpdate: false

    # stop VM
    - job: StopVM
      displayName: 'StopVM'
      dependsOn: Fortify
      pool:
        name: 'Azure Pipelines'
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'Azure Labs(c56bd57b-639e-4378-a70a-0484570ebb6d)'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: 'az vm stop -g FDRGDN-rg -n FDRGDNvm'

  - stage: Build
    displayName: Build stage
    dependsOn: FortifyDeploy
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)

      - upload: manifests
        artifact: manifests

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy
      pool:
        vmImage: $(vmImageName)
      environment: 'giuliadinuzzopipelinesjavascriptdocker.fdrgdn-ns'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: createSecret
                secretName: $(imagePullSecret)
                dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: deploy
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                  $(Pipeline.Workspace)/manifests/service.yml
                imagePullSecrets: |
                  $(imagePullSecret)
                containers: |
                  $(containerRegistry)/$(imageRepository):$(tag)
